30.738/12
30.738/12*3
library("raster", lib.loc="D:/Software/R/R-3.2.2/library")
library(raster)
library("raster", lib.loc="D:/Software/R/R-3.2.2/library")
agb  <- raster(x = "C:\Users\55110140\Desktop\AGB_new\Avitabile_AGB_Ref_data.tif")
agb  <- raster(x = "C:\\Users\55110140\Desktop\AGB_new\Avitabile_AGB_Ref_data.tif")
agb  <- raster(x = "C:\\Users\55110140\\Desktop\\AGB_new\\Avitabile_AGB_Ref_data.tif")
install.packages("RStoolbox")
library("sp", lib.loc="D:/Software/R/R-3.2.2/library")
library("rgdal", lib.loc="D:/Software/R/R-3.2.2/library")
samps  <- readOGR("G:\\NWP\\samples\\nwp_merge")
samps  <- readOGR("G:\\NWP\\samples\\",layer = nwp_merge)
samps  <- readOGR("G:\\NWP\\samples",layer = nwp_merge)
samps  <- readOGR("G:\\NWP\\samples",layer = "nwp_merge")
landsat_mos <- stack("G:\\NWP\\mosaic\\n99.img")
landsat_mos <- stack("G:\\NWP\\mosaic\\n99")
landsat_mos <- stack(x = "G:\\NWP\\mosaic\\n99")
library("raster", lib.loc="D:/Software/R/R-3.2.2/library")
landsat_mos <- stack(x = "G:\\NWP\\mosaic\\n99")
landsat_mos <- stack(x = "G:\\NWP\\mosaic\\n99.img")
landsat_mos
samps
classified <- superClass(landsatmos,
samps,
valData = NULL,
responseCol = "ID",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsatmos,
samps,
valData = NULL,
responseCol = "ID",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
library("RStoolbox", lib.loc="D:/Software/R/R-3.2.2/library")
classified <- superClass(landsatmos,
samps,
valData = NULL,
responseCol = "ID",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "ID",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "Id",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "Id",
nSamples = 10000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classi
overwrite = TRUE)
samps,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
load("C:/Users/55110140/Desktop/rmods.RData")
library(caret)
library(randomForest)
library(e1071)
library(maptools)
library(raster)
library(RStoolbox)
classified.mod5 <- superClass(landsat_mos,
samples.5class,
valData = NULL,
responseCol = "Id",
nSamples = 8000,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
mode = "classification",
predict = FALSE,
#predType = "raw",
#filename = "G:\\NWP\\probs.mod5.tif",
#overwrite = TRUE
)
load("C:/Users/55110140/Desktop/rmods.RData")
plot(samples)
xyplot(samples)
library("sp", lib.loc="D:/Software/R/R-3.2.2/library")
xyplot(samples)
plot(samples)
landsat_mos <- stack(x = "C:\\Users\\55110140\\Desktop\\NWP_landcover\\2007\\mosaic2007\\mosaic\\n99.img")
library("raster", lib.loc="D:/Software/R/R-3.2.2/library")
landsat_mos <- stack(x = "C:\\Users\\55110140\\Desktop\\NWP_landcover\\2007\\mosaic2007\\mosaic\\n99.img")
library(caret)
library(randomForest)
library(e1071)
library(maptools)
library(raster)
library(RStoolbox)
classified.mod5 <- superClass(landsat_mos,
samples.5class,
valData = NULL,
responseCol = "Id",
nSamples = 8000,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
mode = "classification",
predict = FALSE,
# predType = "raw",
#  filename = "G:\\NWP\\probs.mod5.tif",
#overwrite = TRUE
)
classified.mod5
classified.mod4
require(maptools)
require(sp)
trainvals <- (extract(landsat_mos, samples.5class,df=TRUE)
trainvals <- extract(landsat_mos, samples.5class,df=TRUE)
View(trainvals)
samples.5class$Id
trainvals  <- cbind(samples.5class$Id,trainvals)
View(trainvals)
trainvals$Class  <- trainvals$samples.5class$Id
trainvals$Class  <- trainvals[,1]
View(trainvals)
View(trainvals)
trainvals  <- trainvals[,2:9]
View(trainvals)
trainvals  <- trainvals[,2:8]
View(trainvals)
randfor <- randomForest(cLASS ~., data=trainvals, importance=TRUE, na.action=na.omit)
randfor <- randomForest(Class ~., data=trainvals, importance=TRUE, na.action=na.omit)
randfor <- randomForest(as.factor(Class) ~., data=trainvals, importance=TRUE, na.action=na.omit)
randfor
varImpPlot(randfor)
marginData <- margin(randfor)
trainingAccuracy <- cbind(marginData[order(marginData)], trainvals[order(marginData),1])
colnames(trainingAccuracy) <- c("margin", "classNum")
xyCoords <- samples.5class@coords
xyCoords <- xyCoords[order(marginData),]
pointVector <- SpatialPointsDataFrame(xyCoords, as.data.frame(trainingAccuracy), coords.nrs = numeric(0), proj4string = landsat_mos@crs)
writeOGR(pointVector, outMarginFile, "layer", driver="ESRI Shapefile", check_exists=TRUE)
library("rgdal", lib.loc="D:/Software/R/R-3.2.2/library")
pointVector <- SpatialPointsDataFrame(xyCoords, as.data.frame(trainingAccuracy), coords.nrs = numeric(0), proj4string = landsat_mos@crs)
writeOGR(pointVector, outMarginFile, "layer", driver="ESRI Shapefile", check_exists=TRUE)
pointVector
writeOGR(pointVector, "C:\\Users\\55110140\\Desktop\\NWP_landcover\\pointProbs", "layer", driver="ESRI Shapefile", check_exists=TRUE)
plot(raster("D:\Projects_new\PTES_dormice\ndmi\ndmi.LC82000242013143.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LC82000242013143.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72000242000244.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72010242015212.gri"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72010242015052.grd"))
plot(raster("D:\Projects_new\PTES_dormice\ndmi\ndmi.LE72000242015253.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72000242015253.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72010242008161.grd"))
sessionInfo()
library("doParallel", lib.loc="D:/Software/R/R-3.2.2/library")
detect_core
detectCores()
sessionInfo()
library(caret)
library(randomForest)
library(e1071)
library(maptools)
library(raster)
library(RStoolbox)
require(e1071)
install.packages("RStoolbox")
library("RStoolbox", lib.loc="C:/Users/55110140/Google Drive/Research/Software/R-3.2.3/library")
library(raster)
library(maptools)
install.packages("maptools")
library(maptools)
samples  <- readShapePoints("G:\\NWP\\samples\\nwp_merge")
samples  <- readShapePoints("D:/Projects_new//NWP_landcover//Points/merge/nwp_merge")
proj4string(samples)   <- "+proj=utm +zone=35 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
landsat_mos <- stack(x = "D:/Projects_new/NWP_landcover/2007/mosaic2007/mosaic/n99.img")
landsat_mos <- stack(x = "D:/Projects_new/NWP_landcover/2007/mosaic2007/mosaic/n99")
install.packages("rgdal")
landsat_mos <- stack(x = "D:/Projects_new/NWP_landcover/2007/mosaic2007/mosaic/n99")
landsat_mos <- stack(x = "D:/Projects_new/NWP_landcover/2007/mosaic2007/mosaic/n99.img")
plot(landsat_mos,1)
plot(samps,add=TRUE)
plot(samples,add=TRUE)
classified.mod <- superClass(landsat_mos,
samples,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
#minDist = 2,
mode = "classification",
predict = FALSE
)
samples  <- readShapePoints("D:/Projects_new//NWP_landcover//Points/merge/nwp_merge")
proj4string(samples)   <- "+proj=utm +zone=35 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
classified.mod <- superClass(landsat_mos,
samples,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
#minDist = 2,
mode = "classification",
predict = FALSE
)
samples  <- readShapePoints("D:/Projects_new//NWP_landcover//Points/merge/nwp_merge")
proj4string(samples)   <- "+proj=utm +zone=35 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
classified.mod <- superClass(landsat_mos,
samples,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
#minDist = 2,
mode = "classification",
predict = FALSE
)
classified.mod <- superClass(landsat_mos,
samples,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
#minDist = 2,
mode = "classification",
predict = FALSE
)
install.packages("e1071")
library("RStoolbox", lib.loc="C:/Users/55110140/Google Drive/Research/Software/R-3.2.3/library")
library("e1071", lib.loc="C:/Users/55110140/Google Drive/Research/Software/R-3.2.3/library")
library("randomForest", lib.loc="C:/Users/55110140/Google Drive/Research/Software/R-3.2.3/library")
library("caret", lib.loc="C:/Users/55110140/Google Drive/Research/Software/R-3.2.3/library")
classified.mod <- superClass(landsat_mos,
samples,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
#minDist = 2,
mode = "classification",
predict = FALSE
)
classified.mod
samples.sub <- subset(sample, samples$Id <5)
library("sp", lib.loc="C:/Users/55110140/Google Drive/Research/Software/R-3.2.3/library")
samples.sub <- subset(sample, samples$Id <5)
samples.sub <- subset(samples, samples$Id <5)
samples.sub
samples.sub <- subset(samples, samples$Id <6)
classified.mod <- superClass(landsat_mos,
samples.sub,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
#minDist = 2,
mode = "classification",
predict = FALSE
)
classified.mod
samples3  <- readShapePoints("D:/Projects_new//NWP_landcover//Points/points3class")
proj4string(samples3)   <- "+proj=utm +zone=35 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
classified.mod.3class <- superClass(landsat_mos,
samples3,
valData = NULL,
responseCol = "ID2",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
#minDist = 2,
mode = "classification",
predict = FALSE
)
classified.mod.3class
classified.mod.3class <- superClass(landsat_mos,
samples3,
valData = NULL,
responseCol = "ID2",
nSamples = 6000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.6,
model = "rf",
tuneLength = 3,
kfold = 5,
#minDist = 2,
mode = "classification",
predict = FALSE
)
classified.mod.3class
classified.mod.3class <- superClass(landsat_mos,
samples3,
valData = NULL,
responseCol = "ID2",
nSamples = 8000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 10,
#minDist = 2,
mode = "classification",
predict = FALSE
)
classified.mod.3class
save.image("D:/Projects_new/NWP_landcover/rmods.RData")
setwd("D:/Projects_new/woodycovermodels/CodeData/")
library(raster)
library(spatial.tools)
install.packages("spatial.tools")
library(zebu)
library(doParallel)
library(caret)
study.area <- readOGR(dsn = "/Data/shapefiles",layer = "StudyArea")
library(rgdal)
setwd("D:/Projects_new/woodycovermodels/CodeData/")
study.area <- readOGR(dsn = "/Data/shapefiles",layer = "StudyArea")
study.area <- readOGR(dsn = "Data/shapefiles",layer = "StudyArea")
Landsat.list  <- list.files(path = "Data/Imagery/Landsat/",
pattern = "sr_band.*.tif$",
full.names = TRUE,
recursive = TRUE)
PALSAR.list  <- list.files(path = "Data/Imagery/PALSAR/",
pattern = "*.tif$",
full.names = TRUE,
recursive = FALSE)
Landsat.list[grep("2008089",Landsat.list)]
Landsat.wet  <- stack(sapply(X = Landsat.list[grep("2008089",Landsat.list)],FUN = raster))
Landsat.wet  <- crop(x = Landsat.wet,y = study.area)
install.packages("devtools")
install.packages("C:/Users/55110140/Google Drive/Research/Software/zebu_1.0.tar.gz", repos = NULL, type = "source")
library("zebu", lib.loc="C:/Users/55110140/Google Drive/Research/Software/R-3.2.3/library")
palsar.stack  <- stack(sapply(X = PALSAR.list,FUN = raster))
palsar.stack  <- PalsarBackscatter(palsar.stack)
library(spatial.tools)
palsar.stack  <- spatial_sync_raster(unsynced = palsar.stack,reference = Landsat,method = "ngb")
PALSAR.list
names(palsar.stack) <- c("HH", "HV")
library("RStoolbox", lib.loc="C:/Users/55110140/Google Drive/Research/Software/R-3.2.3/library")
msavi.wet <- spectralIndices(img =Landsat.wet,red = 3,nir = 4,indices = MSAVI ,scaleFactor = 0.0001)
msavi.wet <- spectralIndices(img =Landsat.wet,red = 3,nir = 4,indices = "MSAVI" ,scaleFactor = 0.0001)
msavi.wet
plot(msavi.wet)
ndvi.wet <- spectralIndices(img =Landsat.wet,red = 3,nir = 4,indices = "NDVI" ,scaleFactor = 0.0001)
Landsat.dry  <- stack(sapply(X = Landsat.list[grep("2008249",Landsat.list)],FUN = raster))
Landsat.dry  <- crop(x = Landsat.dry,y = study_area)
Landsat.dry  <- crop(x = Landsat.dry,y = study.area)
msavi.dry <- spectralIndices(img =Landsat.dry,red = 3,nir = 4,indices = "MSAVI" ,scaleFactor = 0.0001)
ndvi.dry <- spectralIndices(img =Landsat.dry,red = 3,nir = 4,indices = "NDVI" ,scaleFactor = 0.0001)
Landsat  <- stack(Landsat.wet, msavi.wet, ndvi.wet, Landsat.dry, msavi.dry,ndvi.dry)
band_names <- c("Wet_B1", "Wet_B2","Wet_B3","Wet_B4","Wet_B5","Wet_B7","Wet_MSAVI","Wet_NDVI","Dry_B1", "Dry_B2","Dry_B3","Dry_B4","Dry_B5","Dry_B7","Dry_MSAVI","Dry_NDVI")
names(Landsat) <- band_names
palsar.stack  <- spatial_sync_raster(unsynced = palsar.stack,reference = Landsat,method = "ngb")
palsar.stack
Landsat_palsar  <- stack(Landsat,palsar.stack)
Landsat_palsar
names(Landsat_palsar)
writeRaster(x = Landsat_palsar,filename = "D:/Projects_new/woodycovermodels/CodeData/Data/Imagery/AllLayers.tif")
