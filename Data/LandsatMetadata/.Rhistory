sr_outname <- paste0("F:\\Projects\\Ghana_land_cover\\masked\\",sr_basename)
sr_stack_masked <- overlay(x = sr_stack, y = fmask, fun = cloud2NA,filename= sr_outname )
a  <-  "F:\\Projects\\Ghana_land_cover\\Landsat_processed\\ghana_194-055_1986-011_L5TSR.tif"
sr_stack<-  brick(a)
raw.path  <- file_path_sans_ext(a)
mask_path  <- paste0(raw.path, "_masks.tif")
cfmask  <- brick(mask_path)
fmask <- cfmask[[2]]
sr_basename  <- basename(a)
sr_outname <- paste0("F:\\Projects\\Ghana_land_cover\\masked\\",sr_basename)
sr_stack_masked <- overlay(x = sr_stack, y = fmask, fun = cloud2NA,filename= sr_outname )
cloud2NA
function(x, mask){
x[y != 0] <- NA
return(x)
}
cloud2NA <- function(x, mask){
x[y != 0] <- NA
return(x)
}
cloud2NA(x = sr_stack,mask = fmask)
cloud2NA <- function(x, y){
x[y != 0] <- NA
return(x)
}
cloud2NA(x = sr_stack,mask = fmask)
cloud2NA(x = sr_stack,y = fmask)
sr_stack_masked <- overlay(x = sr_stack, y = fmask, fun = cloud2NA,filename= sr_outname )
a  <-  "F:\\Projects\\Ghana_land_cover\\Landsat_processed\\ghana_194-056_1986-363_L5TSR.tif"
sr_stack<-  brick(a)
raw.path  <- file_path_sans_ext(a)
mask_path  <- paste0(raw.path, "_masks.tif")
#load cfmask and extract from brick
cfmask  <- brick(mask_path)
fmask <- cfmask[[2]]
#make name for output file
sr_basename  <- basename(a)
sr_outname <- paste0("F:\\Projects\\Ghana_land_cover\\masked\\",sr_basename)
sr_stack_masked <- overlay(x = sr_stack, y = fmask, fun = cloud2NA,filename= sr_outname )
citation()
library("randomForest", lib.loc="D:/Software/R/R-3.2.0/library")
citation("randomForest")
citation("raster")
load("F:/Projects/shrub_cover_paper/sc_paper/covermodels.Rdata.RData")
library("caret", lib.loc="D:/Software/R/R-3.2.2/library")
citation(caret)
citation("caret")
install.packages("doMC")
install.packages("doMC")
install.packages("ISLR")
load("F:/Projects/shrub_cover_paper/shrub_cover-2015-09-19.zip")
load("F:/Projects/shrub_cover_paper/sc_paper/works.RData")
lidar_list  <- list.file("F:\\Projects\\Manc_wetlands\\lidar\\")
lidar_list  <- list.files("F:\\Projects\\Manc_wetlands\\lidar\\")
library(raster)
setMethod('mosaic', signature(x='list', y='missing'),
function(x, y, fun, tolerance=0.05, filename=""){
stopifnot(missing(y))
args <- x
if (!missing(fun)) args$fun <- fun
if (!missing(tolerance)) args$tolerance<- tolerance
if (!missing(filename)) args$filename<- filename
do.call(mosaic, args)
})
mosaic<-do.call(mosaic,lidar_list)
lidar_list  <- list(list.files("F:\\Projects\\Manc_wetlands\\lidar\\"))
lidar_list  <- as.listist(list.files("F:\\Projects\\Manc_wetlands\\lidar\\"))
lidar_list  <- as.list(list.files("F:\\Projects\\Manc_wetlands\\lidar\\"))
mosaic<-do.call(mosaic,lidar_list)
lidar_list  <- as.list(list.files("F:\\Projects\\Manc_wetlands\\lidar\\",full.names = TRUE))
mosaic<-do.call(mosaic,lidar_list)
lidar_list  <- list.files("F:\\Projects\\Manc_wetlands\\lidar\\",full.names = TRUE)
rasters1.mosaicargs <- lidar_list
rasters1.mosaicargs$fun <- mean
mos2 <- do.call(mosaic, rasters1.mosaicargs)
mos  <- mosaic(unlist(x = lidar_list))
rasters1 <- lidar_list
rast.list <- list()
for(i in 1:length(rasters1)) { rast.list[i] <- raster(rasters1[i]) }
rast.list$fun <- mean
rast.mosaic <- do.call(mosaic,rast.list)
rast.mosaic <- do.call(mosaic,rast.list)
plot(rast.mosaic)
lidar_list  <- list.files("F:\\Projects\\Manc_wetlands\\lidar\\",full.names = TRUE)
+proj=tmerc +lat_0=49 +lon_0=-2 +k=0.999601 +x_0=400000 +y_0=-100000
+ellps=airy
+towgs84=446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894 +units=m
+no_defs <>
BNG  <-" +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.999601 +x_0=400000 +y_0=-100000
+ellps=airy
+towgs84=446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894 +units=m
+no_defs <>"
for(i in 1:length(rasters1)) { rast.list[i] <- raster(rasters1[i],crs= BNG) }
for(i in 1:length(rasters1)) { rast.list[i] <- raster(rasters1[i],crs= BNG) }
rasters1 <- lidar_list
rast.list <- list()
for(i in 1:length(rasters1)) { rast.list[i] <- raster(rasters1[i],crs= BNG) }
# And then use do.call on the list of raster objects
rast.list$fun <- mean
rast.mosaic <- do.call(mosaic,rast.list)
plot(rast.mosaic)
rast.mosaic
install.packages("RSAGA")
library(RSAGA)
swi  <- rsaga.wetness.index(in.dem = rast.mosaic)
writeRaster(x = rast.mosaic,filename = "F:\\Projects\\Manc_wetlands\\lidar_mosaic_2m\\lidar_mosaic",format="SAGA")
swi  <- rsaga.wetness.index(in.dem = "F:\\Projects\\Manc_wetlands\\lidar_mosaic_2m\\lidar_mosaic.sgrd")
swi  <- rsaga.wetness.index(in.dem = "F:\\Projects\\Manc_wetlands\\lidar_mosaic_2m\\lidar_mosaic")
rsaga.env()
rsaga.env()
rsaga.env(cmd = "C:\\Program Files\\QGIS Valmiera\\apps\\saga\\saga_cmd.exe")
work_env <- rsaga.env()
work_env
myenv <- rsaga.env(path="C:\\Program Files\\QGIS Valmiera\\apps\\saga\\saga_cmd.exe"")
myenv <- rsaga.env(path="C:\\Program Files\\QGIS Valmiera\\apps\\saga\\saga_cmd.exe")
myenv <- rsaga.env(path="C:\\Program Files\\QGIS Valmiera\\apps\\saga\\")
myenv <- rsaga.env(path="C:\Program Files\QGIS Valmiera\apps\\saga\")
myenv <- rsaga.env(path="C:\\Program Files\\QGIS Valmiera\\")
myenv <- rsaga.env(path="C:\\Program Files\\QGIS Valmiera\\apps\\saga\\saga_cmd.exe")
writeRaster(x = rast.mosaic,filename = "F:\\Projects\\Manc_wetlands\\lidar_mosaic_2m\\lidar_mosaictiff",format="GTiff")
lidar_list  <- list.files("F:\\Projects\\Manc_wetlands\\raw_lidar\\",full.names = TRUE,recursive = TRUE)
lidar_list  <- list.files("F:\\Projects\\Manc_wetlands\\lidar_extracts\\",full.names = TRUE)
rasters1 <- lidar_list
rast.list <- list()
for(i in 1:length(rasters1)) { rast.list[i] <- raster(rasters1[i],crs= BNG) }
rast.list$fun <- mean
rast.mosaic <- do.call(mosaic,rast.list)
plot(rast.mosaic)
save.image("F:/Projects/Manc_wetlands/R_pro/workspace.RData")
load("F:/Projects/Manc_wetlands/R_pro/workspace.RData")
plot(rast.mosaic)
rast.mosaic
mos  <- raster(" C:\\Users\\55110140\\AppData\\Local\\Temp\\R_raster_55110140\\r_tmp_2015-10-05_142947_7296_55828.grd ")
library(raster)
plot(rast.mosaic)
writeRaster(x = rast.mosaic,filename = "F:\\Projects\\Manc_wetlands\\lidar_mosaic_2m\\lidar_mosaictiff",format="GTiff",overwrite=TRUE)
library("RHydro", lib.loc="D:/Software/R/R-3.2.2/library")
topidx <- topidx(rast.mosaic, resolution= 2)
topidx <- topidx(rast.mosaic, resolution= 2)$atb
topidx <- topidx(rast.mosaic, res= 2)
topidx <- topidx(rast.mosaic, 2)
topidx <- topidx( SpatialPixelsDataFrame(points = rast.mosaic[c("x", "y")], data = rast.mosaic)
, 2)
writeRaster(x = rast.mosaic,filename = "F:\\Projects\\Manc_wetlands\\lidar_mosaic_2m\\lidar_mosaic",format="SAGA",overwrite=TRUE)
load("F:/Projects/shrub_cover_paper/sc_paper/works.RData")
library(devtools)
install_github('dutri001/bfastSpatial')
library(bfastSpatial)
install_github('dutri001/bfastSpatial')
install.packages("raster")
install_github('dutri001/bfastSpatial')
library(devtools)
library(devtools)
library("devtools", lib.loc="D:/Software/R/R-3.2.2/library")
install.packages("Rcpp")
library("devtools", lib.loc="D:/Software/R/R-3.2.2/library")
library(devtools)
install.packages("devtools", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(devtools)
library(bfastSpatial)
install_github('dutri001/bfastSpatial',repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(devtools)
install_github('dutri001/bfastSpatial',repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"),)
install.packages("stringi")
install_github('dutri001/bfastSpatial',repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"),)
library(bfastSpatial)
bfastSpatial::
??bfastSpatial
library(bfastSpatial)
data(tura)
names(tura)
s  <- getSceneinfo(names(tura))
View(s)
s$year <- as.numeric(substr(s$date, 1, 4))
hist(s$year, breaks=c(1984:2014), main="p170r55: Scenes per Year",
xlab="year", ylab="# of scenes")
obs  <- countObs(tura)
plot(obs)
obs  <- countObs(tura,as.perc = T)
plot(obs)
percNA <- 100 - countObs(tura, as.perc=TRUE)
plot(percNA, main="percent NA per pixel")
plot(tura, 42)
bfm <- bfmPixel(tura, start=c(2009, 1), interactive=TRUE)
bfm$bfm
plot(bfm$bfm)
bfm1 <- bfmPixel(tura, cell=targcell, start=c(2009, 1),
formula=response~harmon, plot=TRUE)
targcell <- 3492
bfm1 <- bfmPixel(tura, cell=targcell, start=c(2009, 1),
formula=response~harmon, plot=TRUE)
plot(bfm1$bfm)
bfm2 <- bfmPixel(tura, cell=targcell, start=c(2009, 1),
formula=response~harmon, order=1, plot=TRUE)
plot(bfm2$bfm)
plot(bfm2)
plot(bfm2$bfm)
targcell <- 3492
bfm1 <- bfmPixel(tura, cell=targcell, start=c(2009, 1),
formula=response~harmon, plot=TRUE)
bfm1 <- bfmPixel(tura, cell=targcell, start=c(2009, 1),
formula=response~harmon, plot=TRUE)
bfm2 <- bfmPixel(tura, cell=targcell, start=c(2009, 1),
formula=response~harmon, order=1, plot=TRUE)
bfm1 <- bfmPixel(tura, cell=3492, start=c(2009, 1),
formula=response~harmon, plot=TRUE)
bfms <- bfmSpatial(tura, start=c(2009, 1), order=1, mc.cores=10)
bfms <- bfmSpatial(tura, start=c(2009, 1), order=1, mc.cores=1)
plot(bfms)
months <- changeMonth(change)
change <- raster(bfm, 1)
change <- raster(bfms, 1)
monthlabs <- c("jan", "feb", "mar", "apr", "may", "jun",
"jul", "aug", "sep", "oct", "nov", "dec")
cols <- rainbow(12)
plot(months, col=cols, breaks=c(1:12), legend=FALSE)
monthlabs <- c("jan", "feb", "mar", "apr", "may", "jun",
"jul", "aug", "sep", "oct", "nov", "dec")
cols <- rainbow(12)
legend("bottomright", legend=monthlabs, cex=0.5, fill=cols, ncol=2)
plot(months, col=cols, breaks=c(1:12), legend=FALSE)
plot(months, col=cols, breaks=c(1:12), legend=FALSE)
30,738/12
30.738/12
30.738/12*3
library("raster", lib.loc="D:/Software/R/R-3.2.2/library")
library(raster)
library("raster", lib.loc="D:/Software/R/R-3.2.2/library")
agb  <- raster(x = "C:\Users\55110140\Desktop\AGB_new\Avitabile_AGB_Ref_data.tif")
agb  <- raster(x = "C:\\Users\55110140\Desktop\AGB_new\Avitabile_AGB_Ref_data.tif")
agb  <- raster(x = "C:\\Users\55110140\\Desktop\\AGB_new\\Avitabile_AGB_Ref_data.tif")
install.packages("RStoolbox")
library("sp", lib.loc="D:/Software/R/R-3.2.2/library")
library("rgdal", lib.loc="D:/Software/R/R-3.2.2/library")
samps  <- readOGR("G:\\NWP\\samples\\nwp_merge")
samps  <- readOGR("G:\\NWP\\samples\\",layer = nwp_merge)
samps  <- readOGR("G:\\NWP\\samples",layer = nwp_merge)
samps  <- readOGR("G:\\NWP\\samples",layer = "nwp_merge")
landsat_mos <- stack("G:\\NWP\\mosaic\\n99.img")
landsat_mos <- stack("G:\\NWP\\mosaic\\n99")
landsat_mos <- stack(x = "G:\\NWP\\mosaic\\n99")
library("raster", lib.loc="D:/Software/R/R-3.2.2/library")
landsat_mos <- stack(x = "G:\\NWP\\mosaic\\n99")
landsat_mos <- stack(x = "G:\\NWP\\mosaic\\n99.img")
landsat_mos
samps
classified <- superClass(landsatmos,
samps,
valData = NULL,
responseCol = "ID",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsatmos,
samps,
valData = NULL,
responseCol = "ID",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
library("RStoolbox", lib.loc="D:/Software/R/R-3.2.2/library")
classified <- superClass(landsatmos,
samps,
valData = NULL,
responseCol = "ID",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "ID",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "Id",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "Id",
nSamples = 10000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classi
overwrite = TRUE)
samps,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
load("C:/Users/55110140/Desktop/rmods.RData")
library(caret)
library(randomForest)
library(e1071)
library(maptools)
library(raster)
library(RStoolbox)
classified.mod5 <- superClass(landsat_mos,
samples.5class,
valData = NULL,
responseCol = "Id",
nSamples = 8000,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
mode = "classification",
predict = FALSE,
#predType = "raw",
#filename = "G:\\NWP\\probs.mod5.tif",
#overwrite = TRUE
)
load("C:/Users/55110140/Desktop/rmods.RData")
plot(samples)
xyplot(samples)
library("sp", lib.loc="D:/Software/R/R-3.2.2/library")
xyplot(samples)
plot(samples)
landsat_mos <- stack(x = "C:\\Users\\55110140\\Desktop\\NWP_landcover\\2007\\mosaic2007\\mosaic\\n99.img")
library("raster", lib.loc="D:/Software/R/R-3.2.2/library")
landsat_mos <- stack(x = "C:\\Users\\55110140\\Desktop\\NWP_landcover\\2007\\mosaic2007\\mosaic\\n99.img")
library(caret)
library(randomForest)
library(e1071)
library(maptools)
library(raster)
library(RStoolbox)
classified.mod5 <- superClass(landsat_mos,
samples.5class,
valData = NULL,
responseCol = "Id",
nSamples = 8000,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
mode = "classification",
predict = FALSE,
# predType = "raw",
#  filename = "G:\\NWP\\probs.mod5.tif",
#overwrite = TRUE
)
classified.mod5
classified.mod4
require(maptools)
require(sp)
trainvals <- (extract(landsat_mos, samples.5class,df=TRUE)
trainvals <- extract(landsat_mos, samples.5class,df=TRUE)
View(trainvals)
samples.5class$Id
trainvals  <- cbind(samples.5class$Id,trainvals)
View(trainvals)
trainvals$Class  <- trainvals$samples.5class$Id
trainvals$Class  <- trainvals[,1]
View(trainvals)
View(trainvals)
trainvals  <- trainvals[,2:9]
View(trainvals)
trainvals  <- trainvals[,2:8]
View(trainvals)
randfor <- randomForest(cLASS ~., data=trainvals, importance=TRUE, na.action=na.omit)
randfor <- randomForest(Class ~., data=trainvals, importance=TRUE, na.action=na.omit)
randfor <- randomForest(as.factor(Class) ~., data=trainvals, importance=TRUE, na.action=na.omit)
randfor
varImpPlot(randfor)
marginData <- margin(randfor)
trainingAccuracy <- cbind(marginData[order(marginData)], trainvals[order(marginData),1])
colnames(trainingAccuracy) <- c("margin", "classNum")
xyCoords <- samples.5class@coords
xyCoords <- xyCoords[order(marginData),]
pointVector <- SpatialPointsDataFrame(xyCoords, as.data.frame(trainingAccuracy), coords.nrs = numeric(0), proj4string = landsat_mos@crs)
writeOGR(pointVector, outMarginFile, "layer", driver="ESRI Shapefile", check_exists=TRUE)
library("rgdal", lib.loc="D:/Software/R/R-3.2.2/library")
pointVector <- SpatialPointsDataFrame(xyCoords, as.data.frame(trainingAccuracy), coords.nrs = numeric(0), proj4string = landsat_mos@crs)
writeOGR(pointVector, outMarginFile, "layer", driver="ESRI Shapefile", check_exists=TRUE)
pointVector
writeOGR(pointVector, "C:\\Users\\55110140\\Desktop\\NWP_landcover\\pointProbs", "layer", driver="ESRI Shapefile", check_exists=TRUE)
plot(raster("D:\Projects_new\PTES_dormice\ndmi\ndmi.LC82000242013143.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LC82000242013143.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72000242000244.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72010242015212.gri"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72010242015052.grd"))
plot(raster("D:\Projects_new\PTES_dormice\ndmi\ndmi.LE72000242015253.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72000242015253.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72010242008161.grd"))
load("C:/Users/55110140/Desktop/works.RData")
str(All.data.extracts)
setwd("D:././Projects_new/woodycovermodels/")
dir.create("Data")
setwd("Data/")
write.csv("Samples.csv")
write.csv(All.data.extracts,"Samples.csv")
SA_AEAC_CRS
Landsat.list
LS_8_metadata
dir.create("LandsatMetadata")
setwe("LandsatMetadata/")
setwd("LandsatMetadata/")
write.csv(LS_5_metadata,"L_5_meta.csv")
write.csv(LS_7_metadata,"L_7_meta.csv")
write.csv(LS_8_metadata,"L_8_meta.csv")
