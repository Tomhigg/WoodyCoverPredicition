install_github('dutri001/bfastSpatial')
library(bfastSpatial)
install_github('dutri001/bfastSpatial')
install.packages("raster")
install_github('dutri001/bfastSpatial')
library(devtools)
library(devtools)
library("devtools", lib.loc="D:/Software/R/R-3.2.2/library")
install.packages("Rcpp")
library("devtools", lib.loc="D:/Software/R/R-3.2.2/library")
library(devtools)
install.packages("devtools", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(devtools)
library(bfastSpatial)
install_github('dutri001/bfastSpatial',repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
library(devtools)
install_github('dutri001/bfastSpatial',repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"),)
install.packages("stringi")
install_github('dutri001/bfastSpatial',repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"),)
library(bfastSpatial)
bfastSpatial::
??bfastSpatial
library(bfastSpatial)
data(tura)
names(tura)
s  <- getSceneinfo(names(tura))
View(s)
s$year <- as.numeric(substr(s$date, 1, 4))
hist(s$year, breaks=c(1984:2014), main="p170r55: Scenes per Year",
xlab="year", ylab="# of scenes")
obs  <- countObs(tura)
plot(obs)
obs  <- countObs(tura,as.perc = T)
plot(obs)
percNA <- 100 - countObs(tura, as.perc=TRUE)
plot(percNA, main="percent NA per pixel")
plot(tura, 42)
bfm <- bfmPixel(tura, start=c(2009, 1), interactive=TRUE)
bfm$bfm
plot(bfm$bfm)
bfm1 <- bfmPixel(tura, cell=targcell, start=c(2009, 1),
formula=response~harmon, plot=TRUE)
targcell <- 3492
bfm1 <- bfmPixel(tura, cell=targcell, start=c(2009, 1),
formula=response~harmon, plot=TRUE)
plot(bfm1$bfm)
bfm2 <- bfmPixel(tura, cell=targcell, start=c(2009, 1),
formula=response~harmon, order=1, plot=TRUE)
plot(bfm2$bfm)
plot(bfm2)
plot(bfm2$bfm)
targcell <- 3492
bfm1 <- bfmPixel(tura, cell=targcell, start=c(2009, 1),
formula=response~harmon, plot=TRUE)
bfm1 <- bfmPixel(tura, cell=targcell, start=c(2009, 1),
formula=response~harmon, plot=TRUE)
bfm2 <- bfmPixel(tura, cell=targcell, start=c(2009, 1),
formula=response~harmon, order=1, plot=TRUE)
bfm1 <- bfmPixel(tura, cell=3492, start=c(2009, 1),
formula=response~harmon, plot=TRUE)
bfms <- bfmSpatial(tura, start=c(2009, 1), order=1, mc.cores=10)
bfms <- bfmSpatial(tura, start=c(2009, 1), order=1, mc.cores=1)
plot(bfms)
months <- changeMonth(change)
change <- raster(bfm, 1)
change <- raster(bfms, 1)
monthlabs <- c("jan", "feb", "mar", "apr", "may", "jun",
"jul", "aug", "sep", "oct", "nov", "dec")
cols <- rainbow(12)
plot(months, col=cols, breaks=c(1:12), legend=FALSE)
monthlabs <- c("jan", "feb", "mar", "apr", "may", "jun",
"jul", "aug", "sep", "oct", "nov", "dec")
cols <- rainbow(12)
legend("bottomright", legend=monthlabs, cex=0.5, fill=cols, ncol=2)
plot(months, col=cols, breaks=c(1:12), legend=FALSE)
plot(months, col=cols, breaks=c(1:12), legend=FALSE)
30,738/12
30.738/12
30.738/12*3
library("raster", lib.loc="D:/Software/R/R-3.2.2/library")
library(raster)
library("raster", lib.loc="D:/Software/R/R-3.2.2/library")
agb  <- raster(x = "C:\Users\55110140\Desktop\AGB_new\Avitabile_AGB_Ref_data.tif")
agb  <- raster(x = "C:\\Users\55110140\Desktop\AGB_new\Avitabile_AGB_Ref_data.tif")
agb  <- raster(x = "C:\\Users\55110140\\Desktop\\AGB_new\\Avitabile_AGB_Ref_data.tif")
install.packages("RStoolbox")
library("sp", lib.loc="D:/Software/R/R-3.2.2/library")
library("rgdal", lib.loc="D:/Software/R/R-3.2.2/library")
samps  <- readOGR("G:\\NWP\\samples\\nwp_merge")
samps  <- readOGR("G:\\NWP\\samples\\",layer = nwp_merge)
samps  <- readOGR("G:\\NWP\\samples",layer = nwp_merge)
samps  <- readOGR("G:\\NWP\\samples",layer = "nwp_merge")
landsat_mos <- stack("G:\\NWP\\mosaic\\n99.img")
landsat_mos <- stack("G:\\NWP\\mosaic\\n99")
landsat_mos <- stack(x = "G:\\NWP\\mosaic\\n99")
library("raster", lib.loc="D:/Software/R/R-3.2.2/library")
landsat_mos <- stack(x = "G:\\NWP\\mosaic\\n99")
landsat_mos <- stack(x = "G:\\NWP\\mosaic\\n99.img")
landsat_mos
samps
classified <- superClass(landsatmos,
samps,
valData = NULL,
responseCol = "ID",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsatmos,
samps,
valData = NULL,
responseCol = "ID",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
library("RStoolbox", lib.loc="D:/Software/R/R-3.2.2/library")
classified <- superClass(landsatmos,
samps,
valData = NULL,
responseCol = "ID",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "ID",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "Id",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "Id",
nSamples = 10000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classi
overwrite = TRUE)
samps,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
load("C:/Users/55110140/Desktop/rmods.RData")
library(caret)
library(randomForest)
library(e1071)
library(maptools)
library(raster)
library(RStoolbox)
classified.mod5 <- superClass(landsat_mos,
samples.5class,
valData = NULL,
responseCol = "Id",
nSamples = 8000,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
mode = "classification",
predict = FALSE,
#predType = "raw",
#filename = "G:\\NWP\\probs.mod5.tif",
#overwrite = TRUE
)
load("C:/Users/55110140/Desktop/rmods.RData")
plot(samples)
xyplot(samples)
library("sp", lib.loc="D:/Software/R/R-3.2.2/library")
xyplot(samples)
plot(samples)
landsat_mos <- stack(x = "C:\\Users\\55110140\\Desktop\\NWP_landcover\\2007\\mosaic2007\\mosaic\\n99.img")
library("raster", lib.loc="D:/Software/R/R-3.2.2/library")
landsat_mos <- stack(x = "C:\\Users\\55110140\\Desktop\\NWP_landcover\\2007\\mosaic2007\\mosaic\\n99.img")
library(caret)
library(randomForest)
library(e1071)
library(maptools)
library(raster)
library(RStoolbox)
classified.mod5 <- superClass(landsat_mos,
samples.5class,
valData = NULL,
responseCol = "Id",
nSamples = 8000,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
mode = "classification",
predict = FALSE,
# predType = "raw",
#  filename = "G:\\NWP\\probs.mod5.tif",
#overwrite = TRUE
)
classified.mod5
classified.mod4
require(maptools)
require(sp)
trainvals <- (extract(landsat_mos, samples.5class,df=TRUE)
trainvals <- extract(landsat_mos, samples.5class,df=TRUE)
View(trainvals)
samples.5class$Id
trainvals  <- cbind(samples.5class$Id,trainvals)
View(trainvals)
trainvals$Class  <- trainvals$samples.5class$Id
trainvals$Class  <- trainvals[,1]
View(trainvals)
View(trainvals)
trainvals  <- trainvals[,2:9]
View(trainvals)
trainvals  <- trainvals[,2:8]
View(trainvals)
randfor <- randomForest(cLASS ~., data=trainvals, importance=TRUE, na.action=na.omit)
randfor <- randomForest(Class ~., data=trainvals, importance=TRUE, na.action=na.omit)
randfor <- randomForest(as.factor(Class) ~., data=trainvals, importance=TRUE, na.action=na.omit)
randfor
varImpPlot(randfor)
marginData <- margin(randfor)
trainingAccuracy <- cbind(marginData[order(marginData)], trainvals[order(marginData),1])
colnames(trainingAccuracy) <- c("margin", "classNum")
xyCoords <- samples.5class@coords
xyCoords <- xyCoords[order(marginData),]
pointVector <- SpatialPointsDataFrame(xyCoords, as.data.frame(trainingAccuracy), coords.nrs = numeric(0), proj4string = landsat_mos@crs)
writeOGR(pointVector, outMarginFile, "layer", driver="ESRI Shapefile", check_exists=TRUE)
library("rgdal", lib.loc="D:/Software/R/R-3.2.2/library")
pointVector <- SpatialPointsDataFrame(xyCoords, as.data.frame(trainingAccuracy), coords.nrs = numeric(0), proj4string = landsat_mos@crs)
writeOGR(pointVector, outMarginFile, "layer", driver="ESRI Shapefile", check_exists=TRUE)
pointVector
writeOGR(pointVector, "C:\\Users\\55110140\\Desktop\\NWP_landcover\\pointProbs", "layer", driver="ESRI Shapefile", check_exists=TRUE)
plot(raster("D:\Projects_new\PTES_dormice\ndmi\ndmi.LC82000242013143.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LC82000242013143.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72000242000244.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72010242015212.gri"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72010242015052.grd"))
plot(raster("D:\Projects_new\PTES_dormice\ndmi\ndmi.LE72000242015253.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72000242015253.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72010242008161.grd"))
sessionInfo()
library("doParallel", lib.loc="D:/Software/R/R-3.2.2/library")
detect_core
detectCores()
sessionInfo()
setwd("D:/Projects_new//woodycovermodels")
LS_8_metadata  <- read.table(file = "Landsat_metadata/LSR_LANDSAT_8_95521.txt",header = TRUE,sep = ",")
LS_5_metadata  <- read.table(file = "Landsat_metadata/LSR_LANDSAT_TM_95518.txt",header = TRUE,sep = ",",fill=TRUE)
setwd("CodeData//Data")
LS_8_metadata  <- read.table(file = "Landsat_metadata/LSR_LANDSAT_8_95521.txt",header = TRUE,sep = ",")
LS_8_metadata  <- read.table(file = "/Landsat_metadata/LSR_LANDSAT_8_95521.txt",header = TRUE,sep = ",")
LS_8_metadata  <- read.table(file = "~andsat_metadata/LSR_LANDSAT_8_95521.txt",header = TRUE,sep = ",")
LS_8_metadata  <- read.table(file = "~Landsat_metadata/LSR_LANDSAT_8_95521.txt",header = TRUE,sep = ",")
LS_8_metadata  <- read.table(file = "~Landsat_metadata/L_8_meta",header = TRUE,sep = ",")
LS_8_metadata  <- read.table(file = "/Landsat_metadata/L_8_meta",header = TRUE,sep = ",")
LS_8_metadata  <- read.table(file = "Landsat_metadata/L_8_meta",header = TRUE,sep = ",")
LS_8_metadata  <- read.table(file = "LandsatMetadata/L_8_meta",header = TRUE,sep = ",")
LS_8_metadata  <- read.table(file = "/LandsatMetadata/L_8_meta",header = TRUE,sep = ",")
LS_8_metadata  <- read.table(file = "~/LandsatMetadata/L_8_meta",header = TRUE,sep = ",")
LS_8_metadata  <- read.table(file = "D:/Projects_new/woodycovermodels/CodeData/Data/LandsatMetadata/LandsatMetadata/L_8_meta",header = TRUE,sep = ",")
LS_8_metadata  <- read.table(file = "D:/Projects_new/woodycovermodels/CodeData/Data/LandsatMetadata/LandsatMetadata/L_8_meta.csv",header = TRUE,sep = ",")
LS_8_metadata  <- read.table(file = "D:/Projects_new/woodycovermodels/CodeData/Data/LandsatMetadata/L_8_meta.csv",header = TRUE,sep = ",")
LS_7_metadata  <- read.table(file = "/LandsatMetadata/L_8_meta.csv",header = TRUE,sep = ",",fill= TRUE)
LS_7_metadata  <- read.table(file = "LandsatMetadata/L_7_meta.csv",header = TRUE,sep = ",",fill= TRUE)
LS_5_metadata  <- read.table(file = "LandsatMetadata/L_5_meta.csv",header = TRUE,sep = ",",fill=TRUE)
LS_8_metadata  <- read.table(file = "LandsatMetadata/L_8_meta.csv",header = TRUE,sep = ",")
LS7meta <- LS_7_metadata %>% select(WRS.Path, WRS.Row, Date.Acquired) %>%
mutate(PathRow=paste(WRS.Path, WRS.Row,sep="_"),
month=as.numeric(paste(substr(x = Date.Acquired,start = 6,stop = 7))),
year= as.numeric(paste(substr(x=Date.Acquired,start=1,stop=4)))) %>%
mutate(season = ifelse(test =  month %in% c(5:9), yes = "D" ,no =  "W"))%>%
group_by(PathRow, year,season)%>% summarise(cnt = n())
library(dplyr)
library(tidyr)
LS7meta <- LS_7_metadata %>% select(WRS.Path, WRS.Row, Date.Acquired) %>%
mutate(PathRow=paste(WRS.Path, WRS.Row,sep="_"),
month=as.numeric(paste(substr(x = Date.Acquired,start = 6,stop = 7))),
year= as.numeric(paste(substr(x=Date.Acquired,start=1,stop=4)))) %>%
mutate(season = ifelse(test =  month %in% c(5:9), yes = "D" ,no =  "W"))%>%
group_by(PathRow, year,season)%>% summarise(cnt = n())
View(LS7meta)
LS7meta <- LS_7_metadata %>% select(WRS.Path, WRS.Row, Date.Acquired) %>%
mutate(PathRow=paste(WRS.Path, WRS.Row,sep="_"),
month=as.numeric(paste(substr(x = Date.Acquired,start = 6,stop = 7))),
year= as.numeric(paste(substr(x=Date.Acquired,start=1,stop=4)))) %>%
mutate(season = ifelse(test =  month %in% c(5:9), yes = "D" ,no =  "W"))
View(LS7meta)
LS7meta <- LS_7_metadata %>% select(WRS.Path, WRS.Row, Date.Acquired) %>%
mutate(PathRow=paste(WRS.Path, WRS.Row,sep="_"),
month=as.numeric(paste(substr(x = Date.Acquired,start = 6,stop = 7))),
year= as.numeric(paste(substr(x=Date.Acquired,start=1,stop=4)))) %>%
mutate(season = ifelse(test =  month %in% c(5:9), yes = "D" ,no =  "W"))%>%
gather(PathRow, year,season)%>% summarise(cnt = n())
View(LS7meta)
LS7meta <- LS_7_metadata %>% select(WRS.Path, WRS.Row, Date.Acquired) %>%
mutate(PathRow=paste(WRS.Path, WRS.Row,sep="_"),
month=as.numeric(paste(substr(x = Date.Acquired,start = 6,stop = 7))),
year= as.numeric(paste(substr(x=Date.Acquired,start=1,stop=4)))) %>%
mutate(season = ifelse(test =  month %in% c(5:9), yes = "D" ,no =  "W"))%>%
group_by(PathRow, year)%>% summarise(cnt = n())
View(LS7meta)
LS7meta <- LS_7_metadata %>% select(WRS.Path, WRS.Row, Date.Acquired) %>%
mutate(PathRow=as.factor(paste(WRS.Path, WRS.Row,sep="_")),
month=as.numeric(paste(substr(x = Date.Acquired,start = 6,stop = 7))),
year= as.numeric(paste(substr(x=Date.Acquired,start=1,stop=4)))) %>%
mutate(season = ifelse(test =  month %in% c(5:9), yes = "D" ,no =  "W"))%>%
gather(PathRow, year,season)%>% summarise(cnt = n())
View(LS7meta)
LS7meta <- LS_7_metadata %>% select(WRS.Path, WRS.Row, Date.Acquired) %>%
mutate(PathRow=as.factor(paste(WRS.Path, WRS.Row,sep="_")),
month=as.numeric(paste(substr(x = Date.Acquired,start = 6,stop = 7))),
year= as.numeric(paste(substr(x=Date.Acquired,start=1,stop=4)))) %>%
mutate(season = ifelse(test =  month %in% c(5:9), yes = "D" ,no =  "W"))
View(LS7meta)
str(LS7meta)
LS7meta$PathRow
tail(LS7meta)
LS7meta <- LS_7_metadata %>% select(WRS.Path, WRS.Row, Date.Acquired) %>%
mutate(PathRow=paste(WRS.Path, WRS.Row,sep="_"),
month=as.numeric(paste(substr(x = Date.Acquired,start = 6,stop = 7))),
year= as.numeric(paste(substr(x=Date.Acquired,start=1,stop=4)))) %>%
mutate(season = ifelse(test =  month %in% c(5:9), yes = "D" ,no =  "W"))%>%
group_by(PathRow, year)%>% summarise(cnt = n())
View(LS7meta)
LS_7_metadata <- LS_7_metadata[ = <24000]
LS_7_metadata <- LS_7_metadata[ = <24000,]
LS_7_metadata <- LS_7_metadata[24000,]
LS_7_metadata <- LS_7_metadata[1:24000,]
LS_7_metadata <- LS_7_metadata[1:23400,]
LS7meta <- LS_7_metadata %>% select(WRS.Path, WRS.Row, Date.Acquired) %>% filter()
mutate(PathRow=paste(WRS.Path, WRS.Row,sep="_"),
month=as.numeric(paste(substr(x = Date.Acquired,start = 6,stop = 7))),
year= as.numeric(paste(substr(x=Date.Acquired,start=1,stop=4)))) %>%
mutate(season = ifelse(test =  month %in% c(5:9), yes = "D" ,no =  "W"))%>%
group_by(PathRow, year)%>% summarise(cnt = n())
View(LS7meta)
View(LS7meta)
View(LS_7_metadata)
LS_7_metadata  <- read.table(file = "LandsatMetadata/L_7_meta.csv",header = TRUE,sep = ",",fill= TRUE)
LS_7_metadata <- LS_7_metadata[1:23400,]
View(LS_7_metadata)
tail(LS_7_metadata)
LS7meta <- LS_7_metadata %>% select(WRS.Path, WRS.Row, Date.Acquired) %>% filter()
mutate(PathRow=paste(WRS.Path, WRS.Row,sep="_"),
month=as.numeric(paste(substr(x = Date.Acquired,start = 6,stop = 7))),
year= as.numeric(paste(substr(x=Date.Acquired,start=1,stop=4)))) %>%
mutate(season = ifelse(test =  month %in% c(5:9), yes = "D" ,no =  "W"))%>%
group_by(PathRow, year)%>% summarise(cnt = n())
LS7meta <- LS_7_metadata %>% select(WRS.Path, WRS.Row, Date.Acquired) %>%
mutate(PathRow=paste(WRS.Path, WRS.Row,sep="_"),
month=as.numeric(paste(substr(x = Date.Acquired,start = 6,stop = 7))),
year= as.numeric(paste(substr(x=Date.Acquired,start=1,stop=4)))) %>%
mutate(season = ifelse(test =  month %in% c(5:9), yes = "D" ,no =  "W"))%>%
group_by(PathRow, year)%>% summarise(cnt = n())
View(LS7meta)
LS7meta <- LS_7_metadata %>% select(WRS.Path, WRS.Row, Date.Acquired) %>%
mutate(PathRow=paste(WRS.Path, WRS.Row,sep="_"),
month=as.numeric(paste(substr(x = Date.Acquired,start = 6,stop = 7))),
year= as.numeric(paste(substr(x=Date.Acquired,start=1,stop=4)))) %>%
mutate(season = ifelse(test =  month %in% c(5:9), yes = "D" ,no =  "W"))%>%
group_by(PathRow, year,season) %>% summarise(cnt = n())
View(LS7meta)
LS7meta <- LS_7_metadata %>% select(WRS.Path, WRS.Row, Date.Acquired) %>%
mutate(PathRow=paste(WRS.Path, WRS.Row,sep="_"),
month=as.numeric(paste(substr(x = Date.Acquired,start = 6,stop = 7))),
year= as.numeric(paste(substr(x=Date.Acquired,start=1,stop=4)))) %>%
mutate(season = ifelse(test =  month %in% c(5:9), yes = "D" ,no =  "W"))%>%
group_by(PathRow, year,season) %>% summarise(count = n())%>^
mutate(YearSeason=paste(year,season,sep = .))
View(LS7meta)
LS7meta <- LS_7_metadata %>% select(WRS.Path, WRS.Row, Date.Acquired) %>%
mutate(PathRow=paste(WRS.Path, WRS.Row,sep="_"),
month=as.numeric(paste(substr(x = Date.Acquired,start = 6,stop = 7))),
year= as.numeric(paste(substr(x=Date.Acquired,start=1,stop=4)))) %>%
mutate(season = ifelse(test =  month %in% c(5:9), yes = "D" ,no =  "W"))%>%
group_by(PathRow, year,season) %>% summarise(count = n())%>%
mutate(YearSeason=paste(year,season,sep = .))
View(LS7meta)
LS7meta <- LS_7_metadata %>% select(WRS.Path, WRS.Row, Date.Acquired) %>%
mutate(PathRow=paste(WRS.Path, WRS.Row,sep="_"),
month=as.numeric(paste(substr(x = Date.Acquired,start = 6,stop = 7))),
year= as.numeric(paste(substr(x=Date.Acquired,start=1,stop=4)))) %>%
mutate(season = ifelse(test =  month %in% c(5:9), yes = "D" ,no =  "W"))%>%
group_by(PathRow, year,season) %>% summarise(count = n())%>%
mutate(YearSeason=paste(year,season,sep = "."))
View(LS7meta)
rm(LS7meta)
LS.7.counts   <- LS_7_metadata %>% select(WRS.Path, WRS.Row, Date.Acquired) %>%
mutate(PathRow=paste(WRS.Path, WRS.Row,sep="_"),
month=as.numeric(paste(substr(x = Date.Acquired,start = 6,stop = 7))),
year= as.numeric(paste(substr(x=Date.Acquired,start=1,stop=4)))) %>%
mutate(season = ifelse(test =  month %in% c(5:9), yes = "D" ,no =  "W"))%>%
group_by(PathRow, year,season) %>% summarise(count = n())%>%
mutate(YearSeason=paste(year,season,sep = "."))
LS.8.counts   <- LS_8_metadata %>% select(WRS.Path, WRS.Row, Date.Acquired) %>%
mutate(PathRow=paste(WRS.Path, WRS.Row,sep="_"),
month=as.numeric(paste(substr(x = Date.Acquired,start = 6,stop = 7))),
year= as.numeric(paste(substr(x=Date.Acquired,start=1,stop=4)))) %>%
mutate(season = ifelse(test =  month %in% c(5:9), yes = "D" ,no =  "W"))%>%
group_by(PathRow, year,season) %>% summarise(count = n())%>%
mutate(YearSeason=paste(year,season,sep = "."))
View(LS.8.counts)
