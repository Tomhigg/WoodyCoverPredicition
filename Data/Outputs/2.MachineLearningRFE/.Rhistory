bfm1 <- bfmPixel(tura, cell=targcell, start=c(2009, 1),
formula=response~harmon, plot=TRUE)
bfm2 <- bfmPixel(tura, cell=targcell, start=c(2009, 1),
formula=response~harmon, order=1, plot=TRUE)
bfm1 <- bfmPixel(tura, cell=3492, start=c(2009, 1),
formula=response~harmon, plot=TRUE)
bfms <- bfmSpatial(tura, start=c(2009, 1), order=1, mc.cores=10)
bfms <- bfmSpatial(tura, start=c(2009, 1), order=1, mc.cores=1)
plot(bfms)
months <- changeMonth(change)
change <- raster(bfm, 1)
change <- raster(bfms, 1)
monthlabs <- c("jan", "feb", "mar", "apr", "may", "jun",
"jul", "aug", "sep", "oct", "nov", "dec")
cols <- rainbow(12)
plot(months, col=cols, breaks=c(1:12), legend=FALSE)
monthlabs <- c("jan", "feb", "mar", "apr", "may", "jun",
"jul", "aug", "sep", "oct", "nov", "dec")
cols <- rainbow(12)
legend("bottomright", legend=monthlabs, cex=0.5, fill=cols, ncol=2)
plot(months, col=cols, breaks=c(1:12), legend=FALSE)
plot(months, col=cols, breaks=c(1:12), legend=FALSE)
30,738/12
30.738/12
30.738/12*3
library("raster", lib.loc="D:/Software/R/R-3.2.2/library")
library(raster)
library("raster", lib.loc="D:/Software/R/R-3.2.2/library")
agb  <- raster(x = "C:\Users\55110140\Desktop\AGB_new\Avitabile_AGB_Ref_data.tif")
agb  <- raster(x = "C:\\Users\55110140\Desktop\AGB_new\Avitabile_AGB_Ref_data.tif")
agb  <- raster(x = "C:\\Users\55110140\\Desktop\\AGB_new\\Avitabile_AGB_Ref_data.tif")
install.packages("RStoolbox")
library("sp", lib.loc="D:/Software/R/R-3.2.2/library")
library("rgdal", lib.loc="D:/Software/R/R-3.2.2/library")
samps  <- readOGR("G:\\NWP\\samples\\nwp_merge")
samps  <- readOGR("G:\\NWP\\samples\\",layer = nwp_merge)
samps  <- readOGR("G:\\NWP\\samples",layer = nwp_merge)
samps  <- readOGR("G:\\NWP\\samples",layer = "nwp_merge")
landsat_mos <- stack("G:\\NWP\\mosaic\\n99.img")
landsat_mos <- stack("G:\\NWP\\mosaic\\n99")
landsat_mos <- stack(x = "G:\\NWP\\mosaic\\n99")
library("raster", lib.loc="D:/Software/R/R-3.2.2/library")
landsat_mos <- stack(x = "G:\\NWP\\mosaic\\n99")
landsat_mos <- stack(x = "G:\\NWP\\mosaic\\n99.img")
landsat_mos
samps
classified <- superClass(landsatmos,
samps,
valData = NULL,
responseCol = "ID",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsatmos,
samps,
valData = NULL,
responseCol = "ID",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
library("RStoolbox", lib.loc="D:/Software/R/R-3.2.2/library")
classified <- superClass(landsatmos,
samps,
valData = NULL,
responseCol = "ID",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "ID",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "Id",
nSamples = 15000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "Id",
nSamples = 10000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classi
overwrite = TRUE)
samps,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
classified <- superClass(landsat_mos,
samps,
valData = NULL,
responseCol = "Id",
nSamples = 2000,
areaWeightedSampling = FALSE,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
minDist = 2,
mode = "classification",
predict = TRUE,
predType = "raw",
filename = "G:\\NWP\\classified1.tif",
overwrite = TRUE)
load("C:/Users/55110140/Desktop/rmods.RData")
library(caret)
library(randomForest)
library(e1071)
library(maptools)
library(raster)
library(RStoolbox)
classified.mod5 <- superClass(landsat_mos,
samples.5class,
valData = NULL,
responseCol = "Id",
nSamples = 8000,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
mode = "classification",
predict = FALSE,
#predType = "raw",
#filename = "G:\\NWP\\probs.mod5.tif",
#overwrite = TRUE
)
load("C:/Users/55110140/Desktop/rmods.RData")
plot(samples)
xyplot(samples)
library("sp", lib.loc="D:/Software/R/R-3.2.2/library")
xyplot(samples)
plot(samples)
landsat_mos <- stack(x = "C:\\Users\\55110140\\Desktop\\NWP_landcover\\2007\\mosaic2007\\mosaic\\n99.img")
library("raster", lib.loc="D:/Software/R/R-3.2.2/library")
landsat_mos <- stack(x = "C:\\Users\\55110140\\Desktop\\NWP_landcover\\2007\\mosaic2007\\mosaic\\n99.img")
library(caret)
library(randomForest)
library(e1071)
library(maptools)
library(raster)
library(RStoolbox)
classified.mod5 <- superClass(landsat_mos,
samples.5class,
valData = NULL,
responseCol = "Id",
nSamples = 8000,
polygonBasedCV = FALSE,
trainPartition = 0.5,
model = "rf",
tuneLength = 3,
kfold = 5,
mode = "classification",
predict = FALSE,
# predType = "raw",
#  filename = "G:\\NWP\\probs.mod5.tif",
#overwrite = TRUE
)
classified.mod5
classified.mod4
require(maptools)
require(sp)
trainvals <- (extract(landsat_mos, samples.5class,df=TRUE)
trainvals <- extract(landsat_mos, samples.5class,df=TRUE)
View(trainvals)
samples.5class$Id
trainvals  <- cbind(samples.5class$Id,trainvals)
View(trainvals)
trainvals$Class  <- trainvals$samples.5class$Id
trainvals$Class  <- trainvals[,1]
View(trainvals)
View(trainvals)
trainvals  <- trainvals[,2:9]
View(trainvals)
trainvals  <- trainvals[,2:8]
View(trainvals)
randfor <- randomForest(cLASS ~., data=trainvals, importance=TRUE, na.action=na.omit)
randfor <- randomForest(Class ~., data=trainvals, importance=TRUE, na.action=na.omit)
randfor <- randomForest(as.factor(Class) ~., data=trainvals, importance=TRUE, na.action=na.omit)
randfor
varImpPlot(randfor)
marginData <- margin(randfor)
trainingAccuracy <- cbind(marginData[order(marginData)], trainvals[order(marginData),1])
colnames(trainingAccuracy) <- c("margin", "classNum")
xyCoords <- samples.5class@coords
xyCoords <- xyCoords[order(marginData),]
pointVector <- SpatialPointsDataFrame(xyCoords, as.data.frame(trainingAccuracy), coords.nrs = numeric(0), proj4string = landsat_mos@crs)
writeOGR(pointVector, outMarginFile, "layer", driver="ESRI Shapefile", check_exists=TRUE)
library("rgdal", lib.loc="D:/Software/R/R-3.2.2/library")
pointVector <- SpatialPointsDataFrame(xyCoords, as.data.frame(trainingAccuracy), coords.nrs = numeric(0), proj4string = landsat_mos@crs)
writeOGR(pointVector, outMarginFile, "layer", driver="ESRI Shapefile", check_exists=TRUE)
pointVector
writeOGR(pointVector, "C:\\Users\\55110140\\Desktop\\NWP_landcover\\pointProbs", "layer", driver="ESRI Shapefile", check_exists=TRUE)
plot(raster("D:\Projects_new\PTES_dormice\ndmi\ndmi.LC82000242013143.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LC82000242013143.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72000242000244.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72010242015212.gri"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72010242015052.grd"))
plot(raster("D:\Projects_new\PTES_dormice\ndmi\ndmi.LE72000242015253.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72000242015253.grd"))
plot(raster("D:\\Projects_new\\PTES_dormice\\ndmi\\ndmi.LE72010242008161.grd"))
sessionInfo()
library("doParallel", lib.loc="D:/Software/R/R-3.2.2/library")
detect_core
detectCores()
sessionInfo()
sd
load("C:/Users/55110140/Desktop/works.RData")
setwd("D:././Projects_new//woodycovermodels/CodeData//Data")
write.csv(PCtrain,"Training.csv")
write.csv(PCtest,"Testing.csv")
library(ggplot2)
library(gridExtra)
library(dplyr)
ggplot(Variable.importance, aes(x= VariableLabel, y=Overall,fill=classvi))+
geom_bar(stat="identity") + coord_flip() + scale_y_continuous(limits=c(0,70))+
theme_bw() + scale_fill_manual(values=c("darkolivegreen3", "darkolivegreen4", "brown","blue","blue4"))+
ylab("Scaled Variable Importance")+ xlab("Variable")+
geom_rect(aes(xmin = 18 + 0.5, xmax = 11 - 0.5, ymin = 0 , ymax = 70 - 0.5),
fill = "transparent", color = "black", size = 1,linetype=2)+
theme(legend.title=element_blank())
setwd("Outputs/5.Figures/")
pdf("VariableImport.pdf")
ggplot(Variable.importance, aes(x= VariableLabel, y=Overall,fill=classvi))+
geom_bar(stat="identity") + coord_flip() + scale_y_continuous(limits=c(0,70))+
theme_bw() + scale_fill_manual(values=c("darkolivegreen3", "darkolivegreen4", "brown","blue","blue4"))+
ylab("Scaled Variable Importance")+ xlab("Variable")+
geom_rect(aes(xmin = 18 + 0.5, xmax = 11 - 0.5, ymin = 0 , ymax = 70 - 0.5),
fill = "transparent", color = "black", size = 1,linetype=2)+
theme(legend.title=element_blank())
dev.off()
plot1<- ggplot(filter(rfeMetrics,variable=="Rsquared"),aes(x = Variables,y = value))+
geom_line(col="darkgrey",size=1)+
scale_shape_identity() +
stat_sum_single(mean)+
stat_sum_single2(std_h)+
stat_sum_single2(std_l)+
ylab(bquote('Adjusted'~ R^2))+xlab("")+
theme_bw()+theme(text = element_text(size=20))+
geom_hline(yintercept=0.65298831,linetype=2,col= "darkgreen",size=1)+
geom_hline(yintercept=0.65298831*0.95,linetype=2,col= "darkgreen",size=1)
plot2 <- ggplot(filter(rfeMetrics,variable=="RMSE"),aes(x = Variables,y = value))+
geom_line(col="darkgrey",size=1)+
scale_shape_identity() +
stat_sum_single(mean)+
stat_sum_single2(std_h)+
stat_sum_single2(std_l)+
ylab("RMSE")+xlab("Number of Variables")+
theme_bw()+theme(text = element_text(size=20))+
geom_hline(yintercept=0.09367232,linetype=2,col= "darkgreen",size=1)+
geom_hline(yintercept=0.09367232*1.05,linetype=2,col= "darkgreen",size=1)+
scale_y_reverse()
grid.arrange(plot1, plot2, ncol=1)
pdf(file = "rfe.pdf",width = 15,height = 12)
grid.arrange(plot1, plot2, ncol=1)
dev.off()
ggplot(coverValues, aes(x=Predicted, y=Actual)) +
stat_binhex(bins=75)+
#scale_fill_gradientn(colours=c("yellow","green","peachpuff","red","darkred","brown"),name = "Frequency",na.value=NA)+
scale_fill_gradient(low="bisque", high="magenta4",name = "Frequency",na.value=NA)+
#geom_point(size=1, position="jitter",alpha = 0.2) +facet_wrap(~variable)+
#scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method="lm")  +  # Don't add shaded confidence region
scale_y_continuous(limits=c(0,1))+
scale_x_continuous(limits=c(0,1))+
geom_abline(intercept = 0, slope = 1, color="red",
linetype="dashed", size=1)+ theme_bw()+theme(text = element_text(size=20))+
#theme(strip.text.x = element_text(size=20,face="bold"),axis.text=element_text(size=20,face="bold"),axis.title=element_text(size=20,face="bold"))+
labs(x="Predicted Value",y="Actual Value")
pdf(file = "heatscatter.pdf",width = 8,height = 6)
pdf(file = "heatscatter.pdf",width = 8,height = 6)
ggplot(coverValues, aes(x=Predicted, y=Actual)) +
stat_binhex(bins=75)+
#scale_fill_gradientn(colours=c("yellow","green","peachpuff","red","darkred","brown"),name = "Frequency",na.value=NA)+
scale_fill_gradient(low="bisque", high="magenta4",name = "Frequency",na.value=NA)+
#geom_point(size=1, position="jitter",alpha = 0.2) +facet_wrap(~variable)+
#scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method="lm")  +  # Don't add shaded confidence region
scale_y_continuous(limits=c(0,1))+
scale_x_continuous(limits=c(0,1))+
geom_abline(intercept = 0, slope = 1, color="red",
linetype="dashed", size=1)+ theme_bw()+theme(text = element_text(size=20))+
#theme(strip.text.x = element_text(size=20,face="bold"),axis.text=element_text(size=20,face="bold"),axis.title=element_text(size=20,face="bold"))+
labs(x="Predicted Value",y="Actual Value")
dev.off()
pdf(file = "heatscatter.pdf",width = 8,height = 6)
ggplot(coverValues, aes(x=Predicted, y=Actual)) +
stat_binhex(bins=75)+
#scale_fill_gradientn(colours=c("yellow","green","peachpuff","red","darkred","brown"),name = "Frequency",na.value=NA)+
scale_fill_gradient(low="bisque", high="magenta4",name = "Frequency",na.value=NA)+
#geom_point(size=1, position="jitter",alpha = 0.2) +facet_wrap(~variable)+
#scale_colour_hue(l=50) + # Use a slightly darker palette than normal
geom_smooth(method="lm")  +  # Don't add shaded confidence region
scale_y_continuous(limits=c(0,1))+
scale_x_continuous(limits=c(0,1))+
geom_abline(intercept = 0, slope = 1, color="red",
linetype="dashed", size=1)+ theme_bw()+theme(text = element_text(size=20))+
#theme(strip.text.x = element_text(size=20,face="bold"),axis.text=element_text(size=20,face="bold"),axis.title=element_text(size=20,face="bold"))+
labs(x="Predicted Value",y="Actual Value")
dev.off()
ggplot(model.test.r2.forplot,aes(x = Model,y = mn, group=grp))+
geom_point(size=4,col="red")+ geom_line(size=1,col="darkgray",linetype="dashed")+
geom_hline(yintercept= 0.6470302,linetype=2,col= "darkgreen",size=1)+
geom_hline(yintercept= 0.6470302*0.95,linetype=2,col= "darkgreen",size=1)+
ylab(bquote('Adjusted'~ R^2))+xlab("")+
theme_bw()+theme(text = element_text(size=20),axis.text.x=element_text(size=10, angle=25,hjust=1),plot.margin= unit(rep(.5, 4), "lines"))
plot1.sampsize <- ggplot(filter(sample.runs.melt.forplot,variable=="Rsq"),aes(factor(Sample.No),y = value))+
geom_line(col="darkgrey",size=1)+
scale_shape_identity() +
stat_sum_single(mean)+
stat_sum_single2(std_h)+
stat_sum_single2(std_l)+
theme_bw()+ theme(text = element_text(size=20))+
ylab(bquote('Adjusted'~ R^2))+xlab("")+
scale_x_discrete(breaks=seq(500, 30000, 2500))+
#geom_hline(yintercept=0.5834400+7.180483e-06,linetype=2,col= "darkgreen",size=1)+
#geom_hline(yintercept=0.5834400+7.180483e-06,linetype=2,col= "darkgreen",size=1)
plot2.sampsize <- ggplot(filter(sample.runs.melt.forplot,variable=="RMSE"),aes(factor(Sample.No),y = value))+
geom_line(col="darkgrey",size=1)+
scale_shape_identity() +
stat_sum_single(mean)+
stat_sum_single2(std_h)+
stat_sum_single2(std_l)+
theme_bw()+ theme(text = element_text(size=20))+
xlab("Number of Samples")+
ylab("RMSE")+
scale_x_discrete(breaks=seq(500, 30000, 2500))+
scale_y_reverse()+
#geom_hline(yintercept= 0.1024951+7.180483e-06,linetype=2,col= "darkgreen",size=1)
plot1.sampsize <- ggplot(filter(sample.runs.melt.forplot,variable=="Rsq"),aes(factor(Sample.No),y = value))+
geom_line(col="darkgrey",size=1)+
scale_shape_identity() +
stat_sum_single(mean)+
stat_sum_single2(std_h)+
stat_sum_single2(std_l)+
theme_bw()+ theme(text = element_text(size=20))+
ylab(bquote('Adjusted'~ R^2))+xlab("")+
scale_x_discrete(breaks=seq(500, 30000, 2500))+
#geom_hline(yintercept=0.5834400+7.180483e-06,linetype=2,col= "darkgreen",size=1)+
#geom_hline(yintercept=0.5834400+7.180483e-06,linetype=2,col= "darkgreen",size=1)
plot2.sampsize <- ggplot(filter(sample.runs.melt.forplot,variable=="RMSE"),aes(factor(Sample.No),y = value))+
geom_line(col="darkgrey",size=1)+
scale_shape_identity() +
stat_sum_single(mean)+
stat_sum_single2(std_h)+
stat_sum_single2(std_l)+
theme_bw()+ theme(text = element_text(size=20))+
xlab("Number of Samples")+
ylab("RMSE")+
scale_x_discrete(breaks=seq(500, 30000, 2500))+
scale_y_reverse()
#geom_hline(yintercept= 0.1024951+7.180483e-06,linetype=2,col= "darkgreen",size=1)
library("graphics", lib.loc="D:/Software/R/R-3.2.2/library")
plot1.sampsize <- ggplot(filter(sample.runs.melt.forplot,variable=="Rsq"),aes(factor(Sample.No),y = value))+
geom_line(col="darkgrey",size=1)+
scale_shape_identity() +
stat_sum_single(mean)+
stat_sum_single2(std_h)+
stat_sum_single2(std_l)+
theme_bw()+ theme(text = element_text(size=20))+
ylab(bquote('Adjusted'~ R^2))+xlab("")+
scale_x_discrete(breaks=seq(500, 30000, 2500))+
#geom_hline(yintercept=0.5834400+7.180483e-06,linetype=2,col= "darkgreen",size=1)+
#geom_hline(yintercept=0.5834400+7.180483e-06,linetype=2,col= "darkgreen",size=1)
plot2.sampsize <- ggplot(filter(sample.runs.melt.forplot,variable=="RMSE"),aes(factor(Sample.No),y = value))+
geom_line(col="darkgrey",size=1)+
scale_shape_identity() +
stat_sum_single(mean)+
stat_sum_single2(std_h)+
stat_sum_single2(std_l)+
theme_bw()+ theme(text = element_text(size=20))+
xlab("Number of Samples")+
ylab("RMSE")+
scale_x_discrete(breaks=seq(500, 30000, 2500))+
scale_y_reverse()
#geom_hline(yintercept= 0.1024951+7.180483e-06,linetype=2,col= "darkgreen",size=1)
#pdf(file = "samplesize.pdf",width = 15,height = 12)
grid.arrange(plot1.sampsize, plot2.sampsize, ncol=1)
plot1.combs<- ggplot(model.test.r2.forplot,aes(x = Model,y = mn, group=grp))+
geom_point(size=4,col="red")+ geom_line(size=1,col="darkgray",linetype="dashed")+
geom_hline(yintercept= 0.6470302,linetype=2,col= "darkgreen",size=1)+
geom_hline(yintercept= 0.6470302*0.95,linetype=2,col= "darkgreen",size=1)+
ylab(bquote('Adjusted'~ R^2))+xlab("")+
theme_bw()+theme(text = element_text(size=20),axis.text.x=element_text(size=10, angle=25,hjust=1),plot.margin= unit(rep(.5, 4), "lines"))
plot2.combs<- ggplot(model.test.rmse.forplot,aes(x = Model,y = mn, group=grp))+
geom_point(size=4,col="red")+ geom_line(size=1,col="darkgray",linetype="dashed")+
geom_hline(yintercept= 0.09433350,linetype=2,col= "darkgreen",size=1)+
geom_hline(yintercept= 0.09433350*1.05,linetype=2,col= "darkgreen",size=1)+
ylab(bquote("RMSE"))+xlab("")+
theme_bw()+theme(text = element_text(size=20),axis.text.x=element_text(size=10, angle=25,hjust=1),plot.margin= unit(rep(.5, 4), "lines"))+
scale_y_reverse()+
scale_x_discrete(limits = rev(levels(model.test.rmse.forplot$Model)))
#pdf(file = "new_figs/models.pdf",width = 15,height = 12)
grid.arrange(plot1.combs, plot2.combs, ncol=1)
pdf(file = "models.pdf",width = 15,height = 12)
grid.arrange(plot1.combs, plot2.combs, ncol=1)
dev.off()
setwd("..")
setwd("3.variableCombination/")
write.csv(model.test,"VariableCombinationResults.csv")
model.summary.stats <- model.test %>% select(Model, Rsq, RMSE)%>% gather(Metric, Value, Rsq,RMSE) %>% group_by(Model, Metric)%>%
summarise(mn=mean(Value),std = sd(Value))
library("dplyr", lib.loc="D:/Software/R/R-3.2.2/library")
model.summary.stats <- model.test %>% select(Model, Rsq, RMSE)%>% gather(Metric, Value, Rsq,RMSE) %>% group_by(Model, Metric)%>%
summarise(mn=mean(Value),std = sd(Value))
library("tidyr", lib.loc="D:/Software/R/R-3.2.2/library")
model.summary.stats <- model.test %>% select(Model, Rsq, RMSE)%>% gather(Metric, Value, Rsq,RMSE) %>% group_by(Model, Metric)%>%
summarise(mn=mean(Value),std = sd(Value))
model.summary.stats
write.csv(model.summary.stats,"VariableCombinationsSummaryStats.csv")
setwd("..")
setwd("2.MachineLearningRFE/")
Variable.importance
write.csv(Variable.importance,"VariableImportance.csv")
write.csv(rfeMetrics,"rfeMetrics.csv")
write.csv(rfe_grouped_metrics,"rfeSummaryStats.csv")
write.csv(coverValues,"ActPredCoverVals.csv")
